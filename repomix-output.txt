This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-03T11:34:16.766Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
api/
  auth/
    login.ts
    register.ts
  subscription/
    create-checkout.ts
    webhook.ts
  chat.ts
src/
  components/
    ChatMessage.tsx
    ChatSidebar.tsx
    ErrorBoundary.tsx
    FallbackError.tsx
    FeatureCard.tsx
    FileTree.tsx
    FloatingParticles.tsx
    HeroSection.tsx
    Navbar.tsx
    PreviewFrame.tsx
    RobotIllustration.tsx
    SubscriptionModal.tsx
  db/
    index.ts
    schema.ts
  hooks/
    useLocalStorage.ts
  middleware/
    auth.ts
    cors.ts
    rateLimit.ts
  pages/
    AurocoderPage.tsx
    AuthPage.tsx
    ChatPage.tsx
    LandingPage.tsx
  services/
    ai.ts
    analytics.ts
    errorLogging.ts
    webcontainer.ts
  types/
    together-ai.ts
  utils/
    env.ts
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
drizzle.config.ts
errorLogging.ts
index.html
LICENSE
package.json
postcss.config.js
README.md
robots.txt
site.webmanifest
tailwind.config.js
tsconfig.json
vercel.json
vite.config.ts

================================================================
Repository Files
================================================================

================
File: api/auth/login.ts
================
import { compare } from 'crypto-js'
import { getUserByEmail, createSession } from '../../src/db'

export const config = {
  runtime: 'edge',
}

export default async function handler(req: Request) {
  if (req.method !== 'POST') {
    return new Response('Method not allowed', { status: 405 })
  }

  try {
    const { email, password } = await req.json()

    if (!email || !password) {
      return new Response(
        JSON.stringify({ error: 'Email and password are required' }),
        { status: 400, headers: { 'Content-Type': 'application/json' } }
      )
    }

    // Get user from database
    const user = await getUserByEmail(email)

    if (!user) {
      return new Response(
        JSON.stringify({ error: 'Invalid credentials' }),
        { status: 401, headers: { 'Content-Type': 'application/json' } }
      )
    }

    // Verify password
    const isValid = await compare(password, user.passwordHash)

    if (!isValid) {
      return new Response(
        JSON.stringify({ error: 'Invalid credentials' }),
        { status: 401, headers: { 'Content-Type': 'application/json' } }
      )
    }

    // Generate session token
    const sessionToken = crypto.randomUUID()
    await createSession(user.id, sessionToken)

    return new Response(
      JSON.stringify({
        token: sessionToken,
        user: {
          email: user.email,
          subscription: user.subscription
        }
      }),
      {
        headers: {
          'Content-Type': 'application/json',
          'Set-Cookie': `session=${sessionToken}; Path=/; HttpOnly; SameSite=Strict; Max-Age=${24 * 60 * 60}`
        }
      }
    )
  } catch (error) {
    console.error('Login error:', error)
    return new Response(
      JSON.stringify({ error: 'Internal server error' }),
      { status: 500, headers: { 'Content-Type': 'application/json' } }
    )
  }
}

================
File: api/auth/register.ts
================
import { SHA256 } from 'crypto-js'
import { getUserByEmail, createUser } from '../../src/db'
import { corsHeaders } from '../../src/middleware/cors'

export const config = {
  runtime: 'edge',
}

export default async function handler(req: Request) {
  if (req.method !== 'POST') {
    return new Response('Method not allowed', { 
      status: 405,
      headers: corsHeaders(req.headers.get('origin') ?? undefined)
    })
  }

  try {
    const { email, password } = await req.json()

    if (!email || !password) {
      return new Response(
        JSON.stringify({ error: 'Email and password are required' }),
        { 
          status: 400,
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders(req.headers.get('origin') ?? undefined)
          }
        }
      )
    }

    // Check if user already exists
    const existingUser = await getUserByEmail(email)
    if (existingUser) {
      return new Response(
        JSON.stringify({ error: 'User already exists' }),
        { 
          status: 400,
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders(req.headers.get('origin') ?? undefined)
          }
        }
      )
    }

    // Hash password and create user
    const passwordHash = SHA256(password).toString()
    await createUser(email, passwordHash)

    return new Response(
      JSON.stringify({ message: 'User created successfully' }),
      { 
        status: 201,
        headers: {
          'Content-Type': 'application/json',
          ...corsHeaders(req.headers.get('origin') ?? undefined)
        }
      }
    )
  } catch (error) {
    console.error('Registration error:', error)
    return new Response(
      JSON.stringify({ error: 'Internal server error' }),
      { 
        status: 500,
        headers: {
          'Content-Type': 'application/json',
          ...corsHeaders(req.headers.get('origin') ?? undefined)
        }
      }
    )
  }
}

================
File: api/subscription/create-checkout.ts
================
import { Redis } from '@upstash/redis'
import Stripe from 'stripe'

export const config = {
  runtime: 'edge',
}

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!)
const redis = Redis.fromEnv()

const PLANS = {
  basic: {
    price: process.env.STRIPE_BASIC_PRICE_ID,
    name: 'Basic Plan'
  },
  pro: {
    price: process.env.STRIPE_PRO_PRICE_ID,
    name: 'Professional Plan'
  },
  enterprise: {
    price: process.env.STRIPE_ENTERPRISE_PRICE_ID,
    name: 'Enterprise Plan'
  }
}

export default async function handler(req: Request) {
  if (req.method !== 'POST') {
    return new Response('Method not allowed', { status: 405 })
  }

  try {
    const { planId, email } = await req.json()

    if (!planId || !email || !PLANS[planId as keyof typeof PLANS]) {
      return new Response(
        JSON.stringify({ error: 'Invalid plan or email' }),
        { status: 400, headers: { 'Content-Type': 'application/json' } }
      )
    }

    const plan = PLANS[planId as keyof typeof PLANS]

    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: [
        {
          price: plan.price,
          quantity: 1,
        },
      ],
      mode: 'subscription',
      success_url: `${process.env.NEXT_PUBLIC_URL}/subscription/success?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${process.env.NEXT_PUBLIC_URL}/subscription/cancel`,
      customer_email: email,
      metadata: {
        email,
        planId
      }
    })

    return new Response(
      JSON.stringify({ sessionId: session.id, url: session.url }),
      { headers: { 'Content-Type': 'application/json' } }
    )
  } catch (error) {
    console.error('Error creating checkout session:', error)
    return new Response(
      JSON.stringify({ error: 'Failed to create checkout session' }),
      { status: 500, headers: { 'Content-Type': 'application/json' } }
    )
  }
}

================
File: api/subscription/webhook.ts
================
import { Redis } from '@upstash/redis'
import Stripe from 'stripe'

export const config = {
  runtime: 'edge',
}

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!)
const redis = Redis.fromEnv()

export default async function handler(req: Request) {
  if (req.method !== 'POST') {
    return new Response('Method not allowed', { status: 405 })
  }

  const signature = req.headers.get('stripe-signature')
  
  if (!signature) {
    return new Response('No signature', { status: 400 })
  }

  try {
    const body = await req.text()
    const event = stripe.webhooks.constructEvent(
      body,
      signature,
      process.env.STRIPE_WEBHOOK_SECRET!
    )

    switch (event.type) {
      case 'checkout.session.completed': {
        const session = event.data.object as Stripe.Checkout.Session
        const { email, planId } = session.metadata!

        // Update user subscription in Redis
        const user = await redis.get(`user:${email}`)
        if (user) {
          await redis.set(`user:${email}`, {
            ...user,
            subscription: planId,
            stripeCustomerId: session.customer
          })
        }
        break
      }

      case 'customer.subscription.deleted': {
        const subscription = event.data.object as Stripe.Subscription
        const customer = await stripe.customers.retrieve(subscription.customer as string)
        
        if (customer.email) {
          const user = await redis.get(`user:${customer.email}`)
          if (user) {
            await redis.set(`user:${customer.email}`, {
              ...user,
              subscription: 'free'
            })
          }
        }
        break
      }
    }

    return new Response(JSON.stringify({ received: true }), {
      headers: { 'Content-Type': 'application/json' }
    })
  } catch (error) {
    console.error('Webhook error:', error)
    return new Response(
      JSON.stringify({ error: 'Webhook handler failed' }),
      { status: 500, headers: { 'Content-Type': 'application/json' } }
    )
  }
}

================
File: api/chat.ts
================
import { ChatRequestBody, TogetherAIResponse } from '../src/types/together-ai'
import { getUserBySessionToken, getUserMessageCount, createMessage } from '../src/db'

export const config = {
  runtime: 'edge'
}

export default async function handler(req: Request) {
  if (req.method !== 'POST') {
    return new Response('Method not allowed', { status: 405 })
  }

  try {
    // Get session token from cookie
    const sessionToken = req.headers.get('cookie')?.split('session=')?.[1]?.split(';')?.[0]
    
    // Get user from session
    const user = sessionToken ? await getUserBySessionToken(sessionToken) : null
    const subscription = user?.subscription || 'free'

    // Check message limits for free users
    if (!user || subscription === 'free') {
      const messageCount = user ? await getUserMessageCount(user.id) : 0
      if (messageCount >= 5) {
        return new Response(
          JSON.stringify({ error: 'Free message limit exceeded' }),
          { status: 402, headers: { 'Content-Type': 'application/json' } }
        )
      }
    }

    const body: ChatRequestBody = await req.json()

    const response = await fetch('https://api.together.xyz/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TOGETHER_API_KEY}`,
      },
      body: JSON.stringify({
        model: body.model || 'mistralai/Mixtral-8x7B-Instruct-v0.1',
        messages: body.messages,
        temperature: body.temperature || 0.7,
        max_tokens: body.max_tokens || 1000,
      }),
    })

    if (!response.ok) {
      throw new Error('Failed to get AI response')
    }

    const data: TogetherAIResponse = await response.json()

    // Store message in database if user is authenticated
    if (user) {
      await createMessage(
        user.id,
        body.messages[body.messages.length - 1].content
      )
    }

    return new Response(JSON.stringify(data), {
      headers: {
        'Content-Type': 'application/json'
      },
    })
  } catch (error) {
    console.error('Error in chat API:', error)
    return new Response(
      JSON.stringify({ error: 'Failed to process request' }),
      {
        status: 500,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    )
  }
}

================
File: src/components/ChatMessage.tsx
================
import { motion } from 'framer-motion'

interface Message {
  id: number
  text: string
  sender: 'user' | 'bot'
}

interface ChatMessageProps {
  message: Message
}

const ChatMessage = ({ message }: ChatMessageProps) => {
  const isBot = message.sender === 'bot'

  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      className={`flex ${isBot ? 'justify-start' : 'justify-end'}`}
    >
      <div
        className={`max-w-[80%] rounded-2xl px-4 py-3 ${
          isBot
            ? 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200'
            : 'bg-gradient-to-r from-purple-600 to-pink-600 text-white'
        }`}
      >
        {message.text}
      </div>
    </motion.div>
  )
}

export default ChatMessage

================
File: src/components/ChatSidebar.tsx
================
import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { ChevronRight, MessageSquarePlus, MessageSquare } from 'lucide-react'

interface Chat {
  id: string
  name: string
  lastMessage?: string
  timestamp: number
}

interface ChatSidebarProps {
  chats: Chat[]
  activeChat: string
  onChatSelect: (chatId: string) => void
  onNewChat: () => void
  isCollapsed: boolean
  onToggleCollapse: () => void
}

const ChatSidebar = ({
  chats,
  activeChat,
  onChatSelect,
  onNewChat,
  isCollapsed,
  onToggleCollapse,
}: ChatSidebarProps) => {
  const [isHovered, setIsHovered] = useState(false)

  return (
    <div
      className="relative h-full"
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <motion.div
        initial={false}
        animate={{
          width: isCollapsed ? '60px' : '240px',
          transition: { duration: 0.2 },
        }}
        className="h-full bg-gray-50 dark:bg-gray-900 border-r border-gray-200 dark:border-gray-700"
      >
        {/* Collapse Toggle Button */}
        <button
          onClick={onToggleCollapse}
          className={`absolute -right-3 top-4 p-1 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-full shadow-md z-10 
            ${(isHovered || !isCollapsed) ? 'opacity-100' : 'opacity-0'} transition-opacity duration-200`}
        >
          <motion.div
            animate={{ rotate: isCollapsed ? 0 : 180 }}
            transition={{ duration: 0.2 }}
          >
            <ChevronRight className="w-4 h-4 text-gray-600 dark:text-gray-300" />
          </motion.div>
        </button>

        {/* New Chat Button */}
        <div className="p-3">
          <button
            onClick={onNewChat}
            className="w-full flex items-center gap-2 px-3 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors"
          >
            <MessageSquarePlus className="w-5 h-5" />
            <AnimatePresence>
              {!isCollapsed && (
                <motion.span
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                  className="whitespace-nowrap"
                >
                  New Chat
                </motion.span>
              )}
            </AnimatePresence>
          </button>
        </div>

        {/* Chat List */}
        <div className="overflow-y-auto h-[calc(100%-70px)]">
          {chats.map((chat) => (
            <button
              key={chat.id}
              onClick={() => onChatSelect(chat.id)}
              className={`w-full flex items-center gap-2 p-3 hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors
                ${chat.id === activeChat ? 'bg-gray-100 dark:bg-gray-800' : ''}`}
            >
              <MessageSquare className="w-5 h-5 text-gray-600 dark:text-gray-300 flex-shrink-0" />
              <AnimatePresence>
                {!isCollapsed && (
                  <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    className="min-w-0 text-left"
                  >
                    <div className="text-sm font-medium text-gray-700 dark:text-gray-200 truncate">
                      {chat.name}
                    </div>
                    {chat.lastMessage && (
                      <div className="text-xs text-gray-500 dark:text-gray-400 truncate">
                        {chat.lastMessage}
                      </div>
                    )}
                  </motion.div>
                )}
              </AnimatePresence>
            </button>
          ))}
        </div>
      </motion.div>
    </div>
  )
}

export default ChatSidebar

================
File: src/components/ErrorBoundary.tsx
================
import { Component, ErrorInfo, ReactNode } from 'react'
import { logError } from '../services/errorLogging'
import FallbackError from './FallbackError'

interface Props {
  children: ReactNode
}

interface State {
  hasError: boolean
  error: Error | null
  componentStack: string | null
}

class ErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false,
    error: null,
    componentStack: null
  }

  public static getDerivedStateFromError(error: Error): State {
    return { 
      hasError: true, 
      error,
      componentStack: null
    }
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    // Ensure componentStack is never undefined
    const componentStack = errorInfo.componentStack || null
    
    this.setState({
      componentStack
    })
    
    logError(error, {
      componentStack
    })
  }

  private handleReset = () => {
    this.setState({
      hasError: false,
      error: null,
      componentStack: null
    })
  }

  public render() {
    if (this.state.hasError && this.state.error) {
      return (
        <FallbackError
          error={this.state.error}
          componentStack={this.state.componentStack || undefined}
          resetError={this.handleReset}
        />
      )
    }

    return this.props.children
  }
}

export default ErrorBoundary

================
File: src/components/FallbackError.tsx
================
import { useEffect } from 'react'
import { AlertTriangle, RefreshCw } from 'lucide-react'
import { logError } from '../services/errorLogging'

interface FallbackErrorProps {
  error: Error
  componentStack?: string
  eventId?: string
  resetError?: () => void
}

const FallbackError = ({ 
  error, 
  componentStack,
  resetError 
}: FallbackErrorProps) => {
  useEffect(() => {
    logError(error, { componentStack })
  }, [error, componentStack])

  return (
    <div className="min-h-screen flex items-center justify-center p-4 bg-white dark:bg-gray-900">
      <div className="max-w-md w-full text-center">
        <div className="inline-flex items-center justify-center w-16 h-16 rounded-full bg-red-100 dark:bg-red-900 mb-4">
          <AlertTriangle className="w-8 h-8 text-red-600 dark:text-red-300" />
        </div>
        
        <h1 className="text-2xl font-semibold mb-2 dark:text-white">
          Something went wrong
        </h1>
        
        <p className="text-gray-600 dark:text-gray-300 mb-6">
          {import.meta.env.DEV 
            ? error.message
            : "We're sorry, but something went wrong. Please try again or contact support if the problem persists."}
        </p>

        {resetError && (
          <button
            onClick={resetError}
            className="inline-flex items-center gap-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
          >
            <RefreshCw className="w-4 h-4" />
            Try Again
          </button>
        )}
      </div>
    </div>
  )
}

export default FallbackError

================
File: src/components/FeatureCard.tsx
================
import { motion } from 'framer-motion'
import { ReactNode } from 'react'

interface FeatureCardProps {
  icon: ReactNode
  title: string
  description: string
}

const FeatureCard = ({ icon, title, description }: FeatureCardProps) => {
  return (
    <motion.div
      whileHover={{ y: -5 }}
      className="p-6 rounded-2xl bg-white/80 dark:bg-gray-800/80 backdrop-blur-lg border border-gray-200 dark:border-gray-700 shadow-lg"
    >
      <div className="w-12 h-12 mb-4 rounded-lg bg-gradient-to-r from-purple-500 to-pink-500 flex items-center justify-center text-white">
        {icon}
      </div>
      <h3 className="text-xl font-semibold mb-2 dark:text-white">{title}</h3>
      <p className="text-gray-600 dark:text-gray-300">{description}</p>
    </motion.div>
  )
}

export default FeatureCard

================
File: src/components/FileTree.tsx
================
import { FolderOpen, FileText, ChevronDown, ChevronRight } from 'lucide-react'
import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'

interface FileNode {
  name: string
  type: 'file' | 'directory'
  children?: FileNode[]
}

interface FileTreeProps {
  files: FileNode[]
  onSelectFile?: (path: string) => void
}

const FileTreeNode = ({ 
  node, 
  depth = 0, 
  path = '', 
  onSelectFile 
}: { 
  node: FileNode
  depth?: number
  path?: string
  onSelectFile?: (path: string) => void 
}) => {
  const [isOpen, setIsOpen] = useState(false)
  const fullPath = `${path}/${node.name}`

  const handleClick = () => {
    if (node.type === 'directory') {
      setIsOpen(!isOpen)
    } else if (onSelectFile) {
      onSelectFile(fullPath)
    }
  }

  return (
    <div>
      <motion.div
        className="flex items-center gap-1 px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded cursor-pointer"
        style={{ paddingLeft: `${depth * 12}px` }}
        onClick={handleClick}
        whileHover={{ x: 2 }}
      >
        {node.type === 'directory' ? (
          <>
            {isOpen ? (
              <ChevronDown className="w-4 h-4 text-gray-500" />
            ) : (
              <ChevronRight className="w-4 h-4 text-gray-500" />
            )}
            <FolderOpen className="w-4 h-4 text-yellow-500" />
          </>
        ) : (
          <>
            <span className="w-4" />
            <FileText className="w-4 h-4 text-blue-500" />
          </>
        )}
        <span className="text-sm text-gray-700 dark:text-gray-300">{node.name}</span>
      </motion.div>

      <AnimatePresence>
        {isOpen && node.children && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
          >
            {node.children.map((child, index) => (
              <FileTreeNode
                key={index}
                node={child}
                depth={depth + 1}
                path={fullPath}
                onSelectFile={onSelectFile}
              />
            ))}
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  )
}

const FileTree = ({ files, onSelectFile }: FileTreeProps) => {
  return (
    <div className="p-2">
      {files.map((file, index) => (
        <FileTreeNode key={index} node={file} onSelectFile={onSelectFile} />
      ))}
    </div>
  )
}

export default FileTree

================
File: src/components/FloatingParticles.tsx
================
import { useEffect, useRef } from 'react'

const FloatingParticles = () => {
  const canvasRef = useRef<HTMLCanvasElement>(null)

  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return

    const ctx = canvas.getContext('2d')
    if (!ctx) return

    // Set canvas size
    const setCanvasSize = () => {
      canvas.width = window.innerWidth
      canvas.height = window.innerHeight
    }
    setCanvasSize()
    window.addEventListener('resize', setCanvasSize)

    // Particle configuration
    const particleCount = 50
    const particles: Array<{
      x: number
      y: number
      radius: number
      dx: number
      dy: number
      opacity: number
    }> = []

    // Initialize particles
    for (let i = 0; i < particleCount; i++) {
      particles.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        radius: Math.random() * 2 + 0.5,
        dx: (Math.random() - 0.5) * 0.5,
        dy: (Math.random() - 0.5) * 0.5,
        opacity: Math.random() * 0.5 + 0.2,
      })
    }

    // Animation function
    const animate = () => {
      if (!ctx || !canvas) return
      ctx.clearRect(0, 0, canvas.width, canvas.height)

      particles.forEach((particle) => {
        // Move particle
        particle.x += particle.dx
        particle.y += particle.dy

        // Bounce off edges
        if (particle.x < 0 || particle.x > canvas.width) particle.dx *= -1
        if (particle.y < 0 || particle.y > canvas.height) particle.dy *= -1

        // Draw particle
        ctx.beginPath()
        ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2)
        ctx.fillStyle = `rgba(255, 255, 255, ${particle.opacity})`
        ctx.fill()
      })

      requestAnimationFrame(animate)
    }

    animate()

    return () => {
      window.removeEventListener('resize', setCanvasSize)
    }
  }, [])

  return (
    <canvas
      ref={canvasRef}
      className="absolute inset-0 pointer-events-none"
      style={{ mixBlendMode: 'soft-light' }}
    />
  )
}

export default FloatingParticles

================
File: src/components/HeroSection.tsx
================
import { motion } from 'framer-motion'
import { useNavigate } from 'react-router-dom'
import FloatingParticles from './FloatingParticles'

const HeroSection = () => {
  const navigate = useNavigate()

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.6 }}
      className="relative min-h-screen flex items-center justify-center px-6 overflow-hidden"
    >
      <FloatingParticles />
      
      <motion.div
        initial={{ y: 20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ duration: 0.8, delay: 0.2 }}
        className="relative z-10 max-w-4xl mx-auto p-8 rounded-2xl bg-white/10 dark:bg-gray-900/10 backdrop-blur-lg border border-white/20 dark:border-gray-700/20 shadow-2xl"
      >
        <motion.div
          initial={{ scale: 0.95, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ duration: 0.8, delay: 0.4 }}
          className="relative z-10"
        >
          <h1 className="font-aurora text-5xl md:text-7xl font-bold mb-8 bg-clip-text text-transparent bg-aurora-gradient text-center tracking-wider">
            AURORA AI
          </h1>
          
          <p className="font-aurora text-xl md:text-2xl mb-12 text-gray-600 dark:text-gray-300 max-w-3xl mx-auto text-center tracking-wide">
            INTELLIGENT • ADAPTIVE • POWERFUL
          </p>

          <div className="flex justify-center">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => navigate('/chat')}
              className="font-aurora px-8 py-4 bg-aurora-gradient text-white rounded-xl font-semibold text-lg shadow-lg hover:shadow-xl transition-all duration-200"
            >
              START CHATTING
            </motion.button>
          </div>
        </motion.div>

        <div className="absolute inset-0 bg-gradient-to-br from-aurora-purple/5 to-aurora-pink/5 rounded-2xl" />
        <div className="absolute -top-10 -left-10 w-40 h-40 bg-aurora-purple/10 rounded-full filter blur-3xl" />
        <div className="absolute -bottom-10 -right-10 w-40 h-40 bg-aurora-pink/10 rounded-full filter blur-3xl" />
      </motion.div>
    </motion.div>
  )
}

export default HeroSection

================
File: src/components/Navbar.tsx
================
import { Link } from 'react-router-dom'
import { Sun, Moon } from 'lucide-react'

interface NavbarProps {
  darkMode: boolean
  setDarkMode: (value: boolean) => void
}

const Navbar = ({ darkMode, setDarkMode }: NavbarProps) => {
  return (
    <div className="fixed top-0 left-0 right-0 z-50 flex justify-center px-2 py-2">
      <nav className="inline-flex rounded-lg bg-white/70 dark:bg-gray-900/70 backdrop-blur-xl border border-white/20 dark:border-gray-700/30 shadow-lg shadow-black/5">
        <div className="px-4 py-2">
          <div className="flex items-center gap-6">
            <Link 
              to="/" 
              className="text-lg font-bold font-aurora bg-clip-text text-transparent bg-aurora-gradient hover:opacity-80 transition-opacity"
            >
              AURORA
            </Link>
            
            <div className="flex items-center gap-6">
              <Link 
                to="/chat" 
                className="text-sm font-aurora text-gray-600 dark:text-gray-300 hover:text-aurora-purple dark:hover:text-aurora-pink transition-colors"
              >
                Chat
              </Link>
              <Link 
                to="/aurocoder" 
                className="text-sm font-aurora text-gray-600 dark:text-gray-300 hover:text-aurora-purple dark:hover:text-aurora-pink transition-colors"
              >
                CodeAssist
              </Link>
              
              <button
                onClick={() => setDarkMode(!darkMode)}
                className="p-1.5 rounded-md hover:bg-gray-100/50 dark:hover:bg-gray-800/50 transition-colors"
              >
                {darkMode ? (
                  <Sun className="w-4 h-4 text-gray-600 dark:text-gray-300" />
                ) : (
                  <Moon className="w-4 h-4 text-gray-600 dark:text-gray-300" />
                )}
              </button>
            </div>
          </div>
        </div>
      </nav>
    </div>
  )
}

export default Navbar

================
File: src/components/PreviewFrame.tsx
================
import { useEffect, useRef } from 'react'

interface PreviewFrameProps {
  url?: string | null
}

const PreviewFrame = ({ url }: PreviewFrameProps) => {
  const iframeRef = useRef<HTMLIFrameElement>(null)

  useEffect(() => {
    if (url && iframeRef.current) {
      iframeRef.current.src = url
    }
  }, [url])

  if (!url) {
    return (
      <div className="flex items-center justify-center h-full bg-gray-50 dark:bg-gray-900">
        <p className="text-gray-500 dark:text-gray-400">
          Preview will appear here when you run your code
        </p>
      </div>
    )
  }

  return (
    <iframe
      ref={iframeRef}
      className="w-full h-full bg-white"
      title="Preview"
      sandbox="allow-forms allow-modals allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-top-navigation"
    />
  )
}

export default PreviewFrame

================
File: src/components/RobotIllustration.tsx
================
import { motion, useMotionValue, useTransform } from 'framer-motion'

interface RobotIllustrationProps {
  mouseX: number
  mouseY: number
}

const RobotIllustration = ({ mouseX, mouseY }: RobotIllustrationProps) => {
  // Create motion values
  const mouseXMotion = useMotionValue(mouseX)
  const mouseYMotion = useMotionValue(mouseY)

  // Update motion values when props change
  mouseXMotion.set(mouseX)
  mouseYMotion.set(mouseY)

  // Transform mouse position to rotation values
  const rotateX = useTransform(
    mouseYMotion,
    [0, window.innerHeight],
    [15, -15]
  )
  
  const rotateY = useTransform(
    mouseXMotion,
    [0, window.innerWidth],
    [-15, 15]
  )

  return (
    <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
      <motion.div
        style={{
          rotateX,
          rotateY,
          transformStyle: "preserve-3d",
        }}
        className="w-[500px] h-[500px]"
      >
        <svg
          viewBox="0 0 400 400"
          className="w-full h-full drop-shadow-2xl"
        >
          {/* Robot Base */}
          <circle
            cx="200"
            cy="200"
            r="120"
            fill="url(#robotGradient)"
            className="stroke-2 stroke-purple-600 dark:stroke-purple-400"
          />

          {/* Robot Eyes */}
          <motion.circle
            cx="160"
            cy="160"
            r="20"
            className="fill-pink-500 dark:fill-pink-400"
            animate={{
              cx: 160 + (mouseX / window.innerWidth) * 10 - 5,
              cy: 160 + (mouseY / window.innerHeight) * 10 - 5,
            }}
          />
          <motion.circle
            cx="240"
            cy="160"
            r="20"
            className="fill-pink-500 dark:fill-pink-400"
            animate={{
              cx: 240 + (mouseX / window.innerWidth) * 10 - 5,
              cy: 240 + (mouseY / window.innerHeight) * 10 - 5,
            }}
          />

          {/* Mouth */}
          <motion.path
            d="M140,250 Q200,280 260,250"
            fill="none"
            stroke="currentColor"
            strokeWidth="4"
            className="stroke-purple-600 dark:stroke-purple-400"
          />

          {/* Antenna */}
          <motion.line
            x1="200"
            y1="80"
            x2="200"
            y2="40"
            stroke="currentColor"
            strokeWidth="4"
            className="stroke-purple-600 dark:stroke-purple-400"
            animate={{
              transform: `rotate(${(mouseX / window.innerWidth - 0.5) * 30}deg)`,
              transformOrigin: '200px 80px',
            }}
          />
          <motion.circle
            cx="200"
            cy="35"
            r="8"
            className="fill-pink-500 dark:fill-pink-400"
            animate={{
              scale: 0.8 + (mouseX / window.innerWidth) * 0.4,
            }}
          />

          {/* Circuit Patterns */}
          {[...Array(6)].map((_, i) => (
            <motion.circle
              key={i}
              cx={200 + Math.cos(i * Math.PI / 3) * 140}
              cy={200 + Math.sin(i * Math.PI / 3) * 140}
              r="10"
              className="fill-purple-500/30 dark:fill-purple-400/30"
              animate={{
                scale: [1, 1.2, 1],
                opacity: [0.3, 0.6, 0.3],
              }}
              transition={{
                duration: 3,
                repeat: Infinity,
                delay: i * 0.5,
              }}
            />
          ))}

          {/* Gradient Definitions */}
          <defs>
            <radialGradient id="robotGradient">
              <stop offset="0%" className="stop-purple-600 dark:stop-purple-400" stopOpacity="0.2" />
              <stop offset="100%" className="stop-pink-600 dark:stop-pink-400" stopOpacity="0.1" />
            </radialGradient>
          </defs>
        </svg>
      </motion.div>
    </div>
  )
}

export default RobotIllustration

================
File: src/components/SubscriptionModal.tsx
================
import { motion, AnimatePresence } from 'framer-motion'
import { X } from 'lucide-react'
import { useNavigate } from 'react-router-dom'

interface SubscriptionModalProps {
  isOpen: boolean
  onClose: () => void
}

const SubscriptionModal = ({ isOpen, onClose }: SubscriptionModalProps) => {
  const navigate = useNavigate()

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-sm"
        >
          <motion.div
            initial={{ scale: 0.95, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.95, opacity: 0 }}
            className="relative w-full max-w-lg p-6 bg-white dark:bg-gray-800 rounded-2xl shadow-xl"
          >
            <button
              onClick={onClose}
              className="absolute top-4 right-4 p-1 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
            >
              <X className="w-5 h-5" />
            </button>

            <div className="text-center">
              <h3 className="text-2xl font-bold mb-4 bg-clip-text text-transparent bg-gradient-to-r from-purple-600 to-pink-600">
                Upgrade to Continue
              </h3>
              <p className="text-gray-600 dark:text-gray-300 mb-6">
                You've reached the limit of free prompts. Upgrade now to unlock unlimited AI conversations and more features!
              </p>

              <div className="space-y-4">
                <button
                  onClick={() => navigate('/auth')}
                  className="w-full py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-lg hover:opacity-90 transition-opacity"
                >
                  View Subscription Plans
                </button>
                <button
                  onClick={onClose}
                  className="w-full py-3 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
                >
                  Maybe Later
                </button>
              </div>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  )
}

export default SubscriptionModal

================
File: src/db/index.ts
================
import { neon } from '@neondatabase/serverless'
import { drizzle } from 'drizzle-orm/neon-http'
import { eq, and } from 'drizzle-orm'
import * as schema from './schema'

// Get database connection string from environment variable
const sql = neon(process.env.NEON_DATABASE_URL!)

// Create drizzle database instance
export const db = drizzle(sql, { schema })

// Helper functions for common database operations
export async function getUserByEmail(email: string) {
  const users = await db
    .select()
    .from(schema.users)
    .where(eq(schema.users.email, email))
  return users[0]
}

export async function getUserBySessionToken(token: string) {
  const sessions = await db
    .select({
      user: schema.users
    })
    .from(schema.sessions)
    .innerJoin(schema.users, eq(schema.users.id, schema.sessions.userId))
    .where(eq(schema.sessions.token, token))

  return sessions[0]?.user
}

export async function createSession(userId: number, token: string) {
  const expiresAt = new Date()
  expiresAt.setDate(expiresAt.getDate() + 1) // 24 hours from now

  await db.insert(schema.sessions).values({
    userId,
    token,
    expiresAt
  })
}

export async function createUser(email: string, passwordHash: string) {
  const result = await db
    .insert(schema.users)
    .values({
      email,
      passwordHash,
      subscription: 'free'
    })
    .returning()

  return result[0]
}

export async function getUserMessageCount(userId: number) {
  const result = await db
    .select({
      count: sql`count(*)`
    })
    .from(schema.messages)
    .where(eq(schema.messages.userId, userId))

  return Number(result[0]?.count) || 0
}

export async function createMessage(userId: number, content: string) {
  const result = await db
    .insert(schema.messages)
    .values({
      userId,
      content
    })
    .returning()

  return result[0]
}

================
File: src/db/schema.ts
================
import { pgTable, serial, varchar, timestamp, text } from 'drizzle-orm/pg-core'

export const users = pgTable('users', {
  id: serial('id').primaryKey(),
  email: varchar('email', { length: 255 }).unique().notNull(),
  passwordHash: varchar('password_hash', { length: 255 }).notNull(),
  subscription: varchar('subscription', { length: 50 }).default('free').notNull(),
  createdAt: timestamp('created_at').defaultNow().notNull()
})

export const sessions = pgTable('sessions', {
  id: serial('id').primaryKey(),
  token: varchar('token', { length: 255 }).unique().notNull(),
  userId: serial('user_id').references(() => users.id).notNull(),
  expiresAt: timestamp('expires_at').notNull()
})

export const messages = pgTable('messages', {
  id: serial('id').primaryKey(),
  userId: serial('user_id').references(() => users.id).notNull(),
  content: text('content').notNull(),
  createdAt: timestamp('created_at').defaultNow().notNull()
})

export type User = typeof users.$inferSelect
export type Session = typeof sessions.$inferSelect
export type Message = typeof messages.$inferSelect

================
File: src/hooks/useLocalStorage.ts
================
import { useState, useEffect } from 'react'

export function useLocalStorage<T>(key: string, initialValue: T) {
  // Get initial value from localStorage or use provided initial value
  const [storedValue, setStoredValue] = useState<T>(() => {
    try {
      const item = window.localStorage.getItem(key)
      return item ? JSON.parse(item) : initialValue
    } catch (error) {
      console.error('Error reading from localStorage:', error)
      return initialValue
    }
  })

  // Update localStorage whenever stored value changes
  useEffect(() => {
    try {
      window.localStorage.setItem(key, JSON.stringify(storedValue))
    } catch (error) {
      console.error('Error writing to localStorage:', error)
    }
  }, [key, storedValue])

  return [storedValue, setStoredValue] as const
}

================
File: src/middleware/auth.ts
================
import { Redis } from '@upstash/redis'

const redis = Redis.fromEnv()

interface AuthResponse {
  isAuthenticated: boolean
  subscription: string
  email?: string
}

export async function authenticateRequest(request: Request): Promise<AuthResponse> {
  const sessionToken = request.headers.get('cookie')?.split('session=')?.[1]?.split(';')?.[0]

  if (!sessionToken) {
    return { isAuthenticated: false, subscription: 'free' }
  }

  const userEmail = await redis.get(`session:${sessionToken}`)
  if (!userEmail) {
    return { isAuthenticated: false, subscription: 'free' }
  }

  const user = await redis.get(`user:${userEmail}`)
  if (!user) {
    return { isAuthenticated: false, subscription: 'free' }
  }

  return {
    isAuthenticated: true,
    subscription: (user as any).subscription,
    email: userEmail as string
  }
}

================
File: src/middleware/cors.ts
================
export function corsHeaders(origin?: string): HeadersInit {
  return {
    'Access-Control-Allow-Origin': origin || '*',
    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    'Access-Control-Max-Age': '86400',
  }
}

export function handleCors(req: Request): Response | null {
  // Handle preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, {
      headers: corsHeaders(req.headers.get('origin') || undefined)
    })
  }
  return null
}

================
File: src/middleware/rateLimit.ts
================
import { Redis } from '@upstash/redis'
import { Ratelimit } from '@upstash/ratelimit'

const redis = Redis.fromEnv()

// Create rate limiter instance
const ratelimit = new Ratelimit({
  redis,
  limiter: Ratelimit.slidingWindow(10, '1 m'), // 10 requests per minute
  analytics: true,
})

interface RateLimitResponse {
  success: boolean
  limit: number
  remaining: number
  reset: number
}

export async function checkRateLimit(identifier: string): Promise<RateLimitResponse> {
  const { success, limit, reset, remaining } = await ratelimit.limit(identifier)
  
  return {
    success,
    limit,
    remaining,
    reset,
  }
}

================
File: src/pages/AurocoderPage.tsx
================
import { useState, useEffect, useContext } from 'react'
import { Terminal, Play, Maximize2, Minimize2, AlertTriangle, Wand2, LayoutPanelLeft, LayoutPanelRight } from 'lucide-react'
import Editor from '@monaco-editor/react'
import FileTree from '../components/FileTree'
import PreviewFrame from '../components/PreviewFrame'
import { useLocalStorage } from '../hooks/useLocalStorage'
import { ThemeContext } from '../App'
import { generateCode } from '../services/ai'
import { mountFiles, startDevServer, installDependencies, writeFile } from '../services/webcontainer'

interface FileNode {
  name: string
  type: 'file' | 'directory'
  children?: FileNode[]
}

const AurocoderPage = () => {
  const { darkMode } = useContext(ThemeContext)
  const [files] = useLocalStorage<FileNode[]>('project_files', [])
  const [code, setCode] = useState('')
  const [output, setOutput] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [serverUrl, setServerUrl] = useState<string | null>(null)
  const [maximized, setMaximized] = useState(false)
  const [showPreview, setShowPreview] = useState(true)

  useEffect(() => {
    // Initialize WebContainer when component mounts
    const init = async () => {
      try {
        setOutput('Initializing development environment...')
        await mountFiles({
          'package.json': {
            file: {
              contents: JSON.stringify({
                name: 'aurocoder-project',
                type: 'module',
                scripts: {
                  dev: 'vite'
                },
                dependencies: {
                  react: '^18.2.0',
                  'react-dom': '^18.2.0'
                },
                devDependencies: {
                  '@vitejs/plugin-react': '^4.0.0',
                  'vite': '^4.3.9'
                }
              }, null, 2)
            }
          },
          'src': {
            directory: {
              'main.jsx': {
                file: {
                  contents: `
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)`
                }
              }
            }
          }
        })
        setOutput('Environment initialized successfully!')
      } catch (error) {
        console.error('Failed to initialize WebContainer:', error)
        setError('Failed to initialize development environment')
      }
    }
    init()
  }, [])

  const handleFileSelect = (path: string) => {
    // TODO: Implement file selection logic
    console.log('Selected file:', path)
  }

  const handleCodeChange = (value: string | undefined) => {
    if (value !== undefined) {
      setCode(value)
    }
  }

  const handleGenerateCode = async () => {
    setIsLoading(true)
    setError(null)
    try {
      const generatedCode = await generateCode(code)
      setCode(generatedCode)
    } catch (error) {
      setError('Failed to generate code')
      console.error('Code generation error:', error)
    }
    setIsLoading(false)
  }

  const handleRunCode = async () => {
    setIsLoading(true)
    setError(null)
    setOutput('Starting development server...')

    try {
      // Write the current code to App.jsx
      await writeFile('src/App.jsx', code || 'export default function App() { return <div>Hello World</div> }')

      // Install dependencies if needed
      const install = await installDependencies(['vite', '@vitejs/plugin-react'])
      if (!install.success) {
        throw new Error(install.error || 'Failed to install dependencies')
      }

      // Start development server
      const server = await startDevServer()
      if (!server.success) {
        throw new Error(server.error || 'Failed to start server')
      }

      setServerUrl(server.url || null)
      setOutput('Server started successfully!')
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Failed to run code')
      console.error('Runtime error:', error)
    }
    setIsLoading(false)
  }

  return (
    <div className={`pt-16 h-screen ${maximized ? 'p-0' : 'p-4'}`}>
      <div className="h-full rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 overflow-hidden">
        <div className="h-full flex">
          {/* File Explorer */}
          <div className="w-64 border-r border-gray-200 dark:border-gray-700">
            <div className="p-4 border-b border-gray-200 dark:border-gray-700">
              <h2 className="text-lg font-semibold dark:text-white">Files</h2>
            </div>
            <FileTree files={files} onSelectFile={handleFileSelect} />
          </div>

          {/* Main Content */}
          <div className="flex-1 flex flex-col">
            <div className="border-b border-gray-200 dark:border-gray-700">
              <div className="flex items-center justify-between p-2">
                <div className="flex items-center gap-2">
                  <button
                    onClick={handleGenerateCode}
                    disabled={isLoading}
                    className="flex items-center gap-1 px-3 py-1 bg-purple-600 text-white rounded-md hover:bg-purple-700 disabled:bg-purple-400 transition-colors"
                  >
                    <Wand2 className="w-4 h-4" />
                    Generate
                  </button>
                  <button
                    onClick={handleRunCode}
                    disabled={isLoading}
                    className="flex items-center gap-1 px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:bg-green-400 transition-colors"
                  >
                    <Play className="w-4 h-4" />
                    Run
                  </button>
                  <button
                    onClick={() => setShowPreview(!showPreview)}
                    className="flex items-center gap-1 px-3 py-1 text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md transition-colors"
                  >
                    {showPreview ? (
                      <><LayoutPanelLeft className="w-4 h-4" /> Hide Preview</>
                    ) : (
                      <><LayoutPanelRight className="w-4 h-4" /> Show Preview</>
                    )}
                  </button>
                </div>
                <button
                  onClick={() => setMaximized(!maximized)}
                  className="p-1 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
                >
                  {maximized ? (
                    <Minimize2 className="w-5 h-5" />
                  ) : (
                    <Maximize2 className="w-5 h-5" />
                  )}
                </button>
              </div>
            </div>

            <div className="flex-1 flex">
              {/* Code Editor */}
              <div className={`${showPreview ? 'w-1/2' : 'w-full'} border-r border-gray-200 dark:border-gray-700`}>
                <Editor
                  height="100%"
                  defaultLanguage="javascript"
                  theme={darkMode ? 'vs-dark' : 'light'}
                  value={code}
                  onChange={handleCodeChange}
                  options={{
                    minimap: { enabled: false },
                    fontSize: 14,
                    scrollBeyondLastLine: false,
                  }}
                />
              </div>

              {/* Preview */}
              {showPreview && (
                <div className="w-1/2">
                  <PreviewFrame url={serverUrl} />
                </div>
              )}
            </div>

            {/* Output Terminal */}
            <div className="h-1/4 border-t border-gray-200 dark:border-gray-700 bg-gray-900 text-white overflow-auto">
              <div className="flex items-center gap-2 p-2 border-b border-gray-700">
                <Terminal className="w-4 h-4" />
                <span className="text-sm">Output</span>
              </div>
              <div className="p-4 font-mono text-sm whitespace-pre-wrap">
                {error ? (
                  <div className="flex items-center gap-2 text-red-400">
                    <AlertTriangle className="w-4 h-4" />
                    {error}
                  </div>
                ) : (
                  output
                )}
                {serverUrl && (
                  <div className="mt-2 text-green-400">
                    Server running at: {serverUrl}
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default AurocoderPage

================
File: src/pages/AuthPage.tsx
================
import { useState } from 'react'
import { motion } from 'framer-motion'
import { useNavigate } from 'react-router-dom'
import { Lock, CheckCircle } from 'lucide-react'

const AuthPage = () => {
  const navigate = useNavigate()
  const [isLogin, setIsLogin] = useState(true)
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError(null)
    setSuccess(false)

    try {
      const endpoint = isLogin ? '/api/auth/login' : '/api/auth/register'
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      })

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error || 'Authentication failed')
      }

      if (isLogin) {
        // Store session token if needed
        localStorage.setItem('sessionToken', data.token)
        navigate('/chat')
      } else {
        setSuccess(true)
        setTimeout(() => setIsLogin(true), 2000)
      }
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Authentication failed')
    }
  }

  return (
    <div className="min-h-screen pt-16 flex items-center justify-center px-4">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="w-full max-w-md"
      >
        <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-xl overflow-hidden">
          <div className="px-8 py-6 bg-gradient-to-r from-purple-600 to-pink-600 text-white">
            <div className="flex items-center justify-center gap-2">
              <Lock className="w-6 h-6" />
              <h2 className="text-2xl font-bold">
                {isLogin ? 'Welcome Back' : 'Create Account'}
              </h2>
            </div>
          </div>

          <div className="p-8">
            <form onSubmit={handleSubmit} className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Email
                </label>
                <input
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 dark:bg-gray-700 dark:text-white"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Password
                </label>
                <input
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 dark:bg-gray-700 dark:text-white"
                  required
                />
              </div>

              {error && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="text-red-500 text-sm"
                >
                  {error}
                </motion.div>
              )}

              {success && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="flex items-center gap-2 text-green-500"
                >
                  <CheckCircle className="w-5 h-5" />
                  <span>Account created successfully!</span>
                </motion.div>
              )}

              <button
                type="submit"
                className="w-full py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-lg hover:opacity-90 transition-opacity"
              >
                {isLogin ? 'Sign In' : 'Sign Up'}
              </button>
            </form>

            <div className="mt-6 text-center">
              <button
                onClick={() => setIsLogin(!isLogin)}
                className="text-sm text-purple-600 dark:text-purple-400 hover:underline"
              >
                {isLogin
                  ? "Don't have an account? Sign Up"
                  : 'Already have an account? Sign In'}
              </button>
            </div>
          </div>
        </div>
      </motion.div>
    </div>
  )
}

export default AuthPage

================
File: src/pages/ChatPage.tsx
================
import { Send, Trash2 } from 'lucide-react'
import { motion } from 'framer-motion'
import { useState, useEffect } from 'react'
import ChatMessage from '../components/ChatMessage'
import ChatSidebar from '../components/ChatSidebar'
import SubscriptionModal from '../components/SubscriptionModal'
import { useLocalStorage } from '../hooks/useLocalStorage'
import { sendChatMessage } from '../services/ai'
import type { ChatMessage as AIMessage } from '../types/together-ai'

type MessageRole = 'user' | 'system' | 'assistant'

interface Message {
  id: number
  text: string
  sender: 'user' | 'bot'
}

interface Chat {
  id: string
  name: string
  messages: Message[]
  timestamp: number
}

const ChatPage = () => {
  const [chats, setChats] = useLocalStorage<Chat[]>('chats', [])
  const [activeChat, setActiveChat] = useState<string | null>(null)
  const [inputMessage, setInputMessage] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [showSubscriptionModal, setShowSubscriptionModal] = useState(false)
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false)

  useEffect(() => {
    if (chats.length === 0) {
      createNewChat()
    } else if (!activeChat) {
      setActiveChat(chats[0].id)
    }
  }, [chats])

  const createNewChat = () => {
    const newChat: Chat = {
      id: crypto.randomUUID(),
      name: `Chat ${chats.length + 1}`,
      messages: [],
      timestamp: Date.now()
    }
    setChats([newChat, ...chats])
    setActiveChat(newChat.id)
  }

  const getCurrentChat = () => {
    return chats.find(chat => chat.id === activeChat)
  }

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || !activeChat) return

    const currentChat = getCurrentChat()
    if (!currentChat) return

    const userMessage: Message = {
      id: currentChat.messages.length + 1,
      text: inputMessage,
      sender: 'user'
    }

    const updatedChat = {
      ...currentChat,
      messages: [...currentChat.messages, userMessage]
    }

    setChats(chats.map(chat => 
      chat.id === activeChat ? updatedChat : chat
    ))
    setInputMessage('')
    setIsLoading(true)

    try {
      const aiMessages: AIMessage[] = [
        { 
          role: 'system', 
          content: 'You are Aurora, a helpful AI assistant.' 
        } as AIMessage,
        ...currentChat.messages.map(msg => ({
          role: msg.sender === 'user' ? 'user' : 'assistant',
          content: msg.text
        }) as AIMessage),
        { 
          role: 'user', 
          content: inputMessage 
        } as AIMessage
      ]

      const response = await sendChatMessage(aiMessages)

      const botMessage: Message = {
        id: updatedChat.messages.length + 1,
        text: response,
        sender: 'bot'
      }

      const finalChat = {
        ...updatedChat,
        messages: [...updatedChat.messages, botMessage]
      }

      setChats(chats.map(chat => 
        chat.id === activeChat ? finalChat : chat
      ))
    } catch (error) {
      console.error('Error getting AI response:', error)
      if (error instanceof Error && error.message.includes('402')) {
        setShowSubscriptionModal(true)
      }
    } finally {
      setIsLoading(false)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  const clearChat = () => {
    if (!activeChat) return
    const updatedChat = {
      ...getCurrentChat()!,
      messages: []
    }
    setChats(chats.map(chat => 
      chat.id === activeChat ? updatedChat : chat
    ))
  }

  return (
    <div className="flex h-screen pt-16">
      <ChatSidebar
        chats={chats}
        activeChat={activeChat || ''}
        onChatSelect={setActiveChat}
        onNewChat={createNewChat}
        isCollapsed={sidebarCollapsed}
        onToggleCollapse={() => setSidebarCollapsed(!sidebarCollapsed)}
      />

      <div className="flex-1 flex flex-col">
        {/* Chat Messages */}
        <div className="flex-1 overflow-y-auto px-4 py-6 space-y-4">
          {getCurrentChat()?.messages.map((message) => (
            <ChatMessage key={message.id} message={message} />
          ))}
          {isLoading && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="flex justify-start"
            >
              <div className="bg-gray-100 dark:bg-gray-700 rounded-2xl px-4 py-2">
                <div className="flex space-x-2">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" />
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce [animation-delay:0.2s]" />
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce [animation-delay:0.4s]" />
                </div>
              </div>
            </motion.div>
          )}
        </div>

        {/* Input Area */}
        <div className="border-t border-gray-200 dark:border-gray-700 px-4 py-4">
          <div className="max-w-4xl mx-auto flex gap-4">
            <button
              onClick={clearChat}
              className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 transition-colors"
              title="Clear chat"
            >
              <Trash2 className="w-5 h-5" />
            </button>
            
            <div className="flex-1 flex">
              <textarea
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Type your message..."
                className="flex-1 resize-none rounded-l-lg border border-r-0 border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 p-2 focus:outline-none focus:ring-2 focus:ring-purple-500 dark:text-white"
                rows={1}
              />
              <button
                onClick={handleSendMessage}
                disabled={!inputMessage.trim() || isLoading}
                className="px-4 rounded-r-lg bg-purple-600 text-white hover:bg-purple-700 disabled:bg-purple-400 disabled:cursor-not-allowed transition-colors"
              >
                <Send className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>
      </div>

      <SubscriptionModal
        isOpen={showSubscriptionModal}
        onClose={() => setShowSubscriptionModal(false)}
      />
    </div>
  )
}

export default ChatPage

================
File: src/pages/LandingPage.tsx
================
import { motion } from 'framer-motion'
import { useNavigate } from 'react-router-dom'
import { Bot, Sparkles, MessageSquare, Code2, Zap, Brain, ChevronDown, ChevronUp, Check } from 'lucide-react'
import HeroSection from '../components/HeroSection'
import FeatureCard from '../components/FeatureCard'
import { useState } from 'react'

interface FAQItem {
  question: string
  answer: string
}

const LandingPage = () => {
  const navigate = useNavigate()
  const [openFAQ, setOpenFAQ] = useState<number | null>(null)
  const [isAnnual, setIsAnnual] = useState(false)

  const FAQs: FAQItem[] = [
    {
      question: "What is Aurora AI?",
      answer: "Aurora AI is a cutting-edge artificial intelligence assistant designed to help with conversations, coding, and various tasks. It combines natural language processing with advanced AI capabilities to provide human-like interactions."
    },
    {
      question: "How can I get started?",
      answer: "Getting started is easy! Simply click the 'Try Aurora Chat Now' button and begin your conversation. No complex setup or configuration required."
    },
    {
      question: "Is my data secure?",
      answer: "We take data security seriously. All conversations are encrypted and we never store sensitive personal information. Your privacy is our top priority."
    },
    {
      question: "What types of tasks can Aurora help with?",
      answer: "Aurora can assist with a wide range of tasks including general conversation, coding assistance, problem-solving, and more. It's constantly learning and improving to better serve your needs."
    }
  ]

  const features = [
    {
      icon: <Brain className="w-8 h-8" />,
      title: "Advanced AI",
      description: "Powered by cutting-edge language models for human-like interactions"
    },
    {
      icon: <Sparkles className="w-8 h-8" />,
      title: "Smart Responses",
      description: "Contextual and intelligent responses that adapt to your needs"
    },
    {
      icon: <MessageSquare className="w-8 h-8" />,
      title: "Natural Dialog",
      description: "Engage in flowing conversations that feel natural and intuitive"
    },
    {
      icon: <Code2 className="w-8 h-8" />,
      title: "Code Assistant",
      description: "Get help with coding, debugging, and technical problems"
    },
    {
      icon: <Bot className="w-8 h-8" />,
      title: "24/7 Availability",
      description: "Always ready to help, whenever you need assistance"
    },
    {
      icon: <Zap className="w-8 h-8" />,
      title: "Fast & Reliable",
      description: "Quick responses and high availability for seamless interaction"
    }
  ]

  const pricingPlans = [
    {
      name: "Basic",
      description: "Perfect for getting started with AI assistance",
      price: isAnnual ? 99 : 9.99,
      features: [
        "Unlimited AI conversations",
        "Basic code assistance",
        "Standard response time",
        "Email support",
      ],
    },
    {
      name: "Professional",
      description: "Ideal for power users and developers",
      price: isAnnual ? 199 : 19.99,
      features: [
        "Everything in Basic",
        "Priority response time",
        "Advanced code analysis",
        "Custom AI training",
        "Priority support",
      ],
      recommended: true,
    },
    {
      name: "Enterprise",
      description: "For teams and organizations",
      price: isAnnual ? 499 : 49.99,
      features: [
        "Everything in Professional",
        "Dedicated support",
        "Custom integrations",
        "Team collaboration",
        "Advanced analytics",
        "SLA guarantees",
      ],
    },
  ]

  return (
    <div className="relative overflow-hidden">
      <HeroSection />
      
      {/* How it Works Section */}
      <motion.section
        initial={{ opacity: 0 }}
        whileInView={{ opacity: 1 }}
        transition={{ duration: 0.6 }}
        className="relative px-6 py-24"
      >
        <div className="max-w-7xl mx-auto">
          <h2 className="text-4xl md:text-5xl font-bold text-center mb-16 bg-clip-text text-transparent bg-gradient-to-r from-purple-600 to-pink-600 dark:from-purple-400 dark:to-pink-400">
            How Aurora Works
          </h2>
          
          <div className="grid md:grid-cols-3 gap-8 relative">
            {/* Connection Lines */}
            <div className="hidden md:block absolute top-1/2 left-1/3 w-1/3 h-0.5 bg-gradient-to-r from-purple-500 to-pink-500" />
            <div className="hidden md:block absolute top-1/2 right-1/3 w-1/3 h-0.5 bg-gradient-to-r from-pink-500 to-purple-500" />
            
            {/* Steps */}
            {[
              { number: "01", title: "Ask Your Question", description: "Type your query or upload your code" },
              { number: "02", title: "AI Processing", description: "Aurora analyzes and processes your input" },
              { number: "03", title: "Get Results", description: "Receive intelligent, contextual responses" }
            ].map((step, index) => (
              <motion.div
                key={step.number}
                initial={{ y: 50, opacity: 0 }}
                whileInView={{ y: 0, opacity: 1 }}
                transition={{ delay: index * 0.2 }}
                className="relative p-6 bg-white/80 dark:bg-gray-800/80 backdrop-blur-lg rounded-2xl border border-gray-200 dark:border-gray-700 shadow-lg"
              >
                <div className="absolute -top-4 left-4 w-8 h-8 bg-gradient-to-r from-purple-600 to-pink-600 rounded-lg flex items-center justify-center text-white font-bold">
                  {step.number}
                </div>
                <h3 className="mt-4 text-xl font-semibold mb-2 dark:text-white">{step.title}</h3>
                <p className="text-gray-600 dark:text-gray-300">{step.description}</p>
              </motion.div>
            ))}
          </div>
        </div>
      </motion.section>

      {/* Feature Section */}
      <motion.section 
        initial={{ opacity: 0 }}
        whileInView={{ opacity: 1 }}
        transition={{ duration: 0.6 }}
        className="relative px-6 py-24"
      >
        <div className="max-w-7xl mx-auto">
          <h2 className="text-4xl md:text-5xl font-bold text-center mb-16 bg-clip-text text-transparent bg-gradient-to-r from-purple-600 to-pink-600 dark:from-purple-400 dark:to-pink-400">
            Powerful Features
          </h2>
          
          <div className="grid md:grid-cols-3 gap-8">
            {features.map((feature, index) => (
              <FeatureCard
                key={index}
                icon={feature.icon}
                title={feature.title}
                description={feature.description}
              />
            ))}
          </div>
        </div>
      </motion.section>

      {/* Pricing Section */}
      <motion.section
        initial={{ opacity: 0 }}
        whileInView={{ opacity: 1 }}
        transition={{ duration: 0.6 }}
        className="relative px-6 py-24 bg-gradient-to-b from-transparent via-purple-50/50 to-transparent dark:from-transparent dark:via-gray-800/50 dark:to-transparent"
      >
        <div className="max-w-7xl mx-auto">
          <h2 className="text-4xl md:text-5xl font-bold text-center mb-6 bg-clip-text text-transparent bg-gradient-to-r from-purple-600 to-pink-600 dark:from-purple-400 dark:to-pink-400">
            Simple, Transparent Pricing
          </h2>
          <p className="text-center text-gray-600 dark:text-gray-300 mb-8 max-w-2xl mx-auto">
            Choose the perfect plan for your needs. All plans include access to our core AI features.
          </p>

          {/* Billing Toggle */}
          <div className="flex items-center justify-center gap-4 mb-12">
            <span className={`text-sm ${!isAnnual ? 'text-gray-900 dark:text-white font-semibold' : 'text-gray-500'}`}>
              Monthly billing
            </span>
            <button
              onClick={() => setIsAnnual(!isAnnual)}
              className={`relative w-14 h-7 rounded-full transition-colors duration-200 ease-in-out ${
                isAnnual ? 'bg-purple-600' : 'bg-gray-400'
              }`}
            >
              <div
                className={`absolute top-1 left-1 w-5 h-5 bg-white rounded-full transition-transform duration-200 ease-in-out ${
                  isAnnual ? 'translate-x-7' : 'translate-x-0'
                }`}
              />
            </button>
            <span className={`text-sm ${isAnnual ? 'text-gray-900 dark:text-white font-semibold' : 'text-gray-500'}`}>
              Annual billing
              <span className="ml-1 text-green-500 font-medium">
                (Save 20%)
              </span>
            </span>
          </div>

          <div className="grid md:grid-cols-3 gap-8">
            {pricingPlans.map((plan, index) => (
              <motion.div
                key={plan.name}
                initial={{ y: 50, opacity: 0 }}
                whileInView={{ y: 0, opacity: 1 }}
                transition={{ delay: index * 0.2 }}
                className={`relative p-8 bg-white/80 dark:bg-gray-800/80 backdrop-blur-lg rounded-2xl border-2 shadow-xl ${
                  plan.recommended
                    ? 'border-purple-500 dark:border-purple-400'
                    : 'border-gray-200 dark:border-gray-700'
                }`}
              >
                {plan.recommended && (
                  <div className="absolute -top-4 left-1/2 -translate-x-1/2 px-4 py-1 bg-gradient-to-r from-purple-600 to-pink-600 text-white text-sm font-semibold rounded-full">
                    Recommended
                  </div>
                )}

                <h3 className="text-2xl font-bold mb-2 dark:text-white">{plan.name}</h3>
                <p className="text-gray-600 dark:text-gray-300 mb-6">{plan.description}</p>
                
                <div className="mb-6">
                  <span className="text-4xl font-bold text-gray-900 dark:text-white">${plan.price}</span>
                  <span className="text-gray-600 dark:text-gray-300">/{isAnnual ? 'year' : 'month'}</span>
                </div>

                <ul className="space-y-3 mb-8">
                  {plan.features.map((feature, featureIndex) => (
                    <li key={featureIndex} className="flex items-center gap-2">
                      <Check className="w-5 h-5 text-green-500" />
                      <span className="text-gray-600 dark:text-gray-300">{feature}</span>
                    </li>
                  ))}
                </ul>

                <button
                  onClick={() => navigate('/auth')}
                  className={`w-full py-3 rounded-lg font-semibold transition-all ${
                    plan.recommended
                      ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white hover:opacity-90'
                      : 'bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white hover:bg-gray-200 dark:hover:bg-gray-600'
                  }`}
                >
                  Get Started
                </button>
              </motion.div>
            ))}
          </div>
        </div>
      </motion.section>

      {/* Testimonials Section */}
      <motion.section
        initial={{ opacity: 0 }}
        whileInView={{ opacity: 1 }}
        transition={{ duration: 0.6 }}
        className="relative px-6 py-24"
      >
        <div className="max-w-7xl mx-auto">
          <h2 className="text-4xl md:text-5xl font-bold text-center mb-16 bg-clip-text text-transparent bg-gradient-to-r from-purple-600 to-pink-600 dark:from-purple-400 dark:to-pink-400">
            What Users Say
          </h2>

          <div className="grid md:grid-cols-3 gap-8">
            {[
              {
                text: "Aurora has completely transformed how I approach coding problems. It's like having a senior developer by my side 24/7.",
                author: "Sarah Chen",
                role: "Software Engineer"
              },
              {
                text: "The natural conversation flow and intelligent responses make it feel like I'm chatting with a real person. Impressive!",
                author: "Michael Roberts",
                role: "Product Manager"
              },
              {
                text: "As a student, having Aurora to help explain complex concepts has been invaluable. It's like having a personal tutor.",
                author: "James Wilson",
                role: "CS Student"
              }
            ].map((testimonial, index) => (
              <motion.div
                key={index}
                initial={{ y: 50, opacity: 0 }}
                whileInView={{ y: 0, opacity: 1 }}
                transition={{ delay: index * 0.2 }}
                className="p-6 bg-white/80 dark:bg-gray-800/80 backdrop-blur-lg rounded-2xl border border-gray-200 dark:border-gray-700 shadow-lg"
              >
                <p className="text-gray-600 dark:text-gray-300 mb-4">"{testimonial.text}"</p>
                <div>
                  <p className="font-semibold dark:text-white">{testimonial.author}</p>
                  <p className="text-sm text-gray-500 dark:text-gray-400">{testimonial.role}</p>
                </div>
              </motion.div>
            ))}
          </div>
        </div>
      </motion.section>

      {/* FAQ Section */}
      <motion.section
        initial={{ opacity: 0 }}
        whileInView={{ opacity: 1 }}
        transition={{ duration: 0.6 }}
        className="relative px-6 py-24"
      >
        <div className="max-w-3xl mx-auto">
          <h2 className="text-4xl md:text-5xl font-bold text-center mb-16 bg-clip-text text-transparent bg-gradient-to-r from-purple-600 to-pink-600 dark:from-purple-400 dark:to-pink-400">
            Frequently Asked Questions
          </h2>

          <div className="space-y-4">
            {FAQs.map((faq, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
                className="border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden"
              >
                <button
                  onClick={() => setOpenFAQ(openFAQ === index ? null : index)}
                  className="w-full px-6 py-4 flex items-center justify-between bg-white/80 dark:bg-gray-800/80 hover:bg-gray-50 dark:hover:bg-gray-700/80 transition-colors"
                >
                  <span className="font-medium text-left dark:text-white">{faq.question}</span>
                  {openFAQ === index ? (
                    <ChevronUp className="w-5 h-5 text-gray-500" />
                  ) : (
                    <ChevronDown className="w-5 h-5 text-gray-500" />
                  )}
                </button>
                {openFAQ === index && (
                  <div className="px-6 py-4 bg-gray-50/80 dark:bg-gray-700/80">
                    <p className="text-gray-600 dark:text-gray-300">{faq.answer}</p>
                  </div>
                )}
              </motion.div>
            ))}
          </div>
        </div>
      </motion.section>

      {/* CTA Section */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        whileInView={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="relative px-6 py-24 mb-20 bg-gradient-to-b from-transparent to-purple-100/50 dark:to-gray-800/50"
      >
        <div className="max-w-3xl mx-auto text-center">
          <h3 className="text-3xl md:text-4xl font-bold mb-4 dark:text-white">
            Ready to experience the future?
          </h3>
          <p className="text-xl text-gray-600 dark:text-gray-300 mb-8">
            Join thousands of users already benefiting from Aurora AI's capabilities.
          </p>
          <button
            onClick={() => navigate('/chat')}
            className="px-8 py-4 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white rounded-xl font-semibold text-lg shadow-lg hover:shadow-xl transition-all duration-200"
          >
            Try Aurora Chat Now
          </button>
        </div>
      </motion.div>

      {/* Aurora Background Effect */}
      <div className="fixed top-0 left-0 w-full h-full pointer-events-none opacity-50 dark:opacity-30">
        <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-purple-400 rounded-full mix-blend-multiply filter blur-3xl animate-blob" />
        <div className="absolute top-1/3 right-1/4 w-96 h-96 bg-pink-400 rounded-full mix-blend-multiply filter blur-3xl animate-blob animation-delay-2000" />
        <div className="absolute bottom-1/4 left-1/3 w-96 h-96 bg-blue-400 rounded-full mix-blend-multiply filter blur-3xl animate-blob animation-delay-4000" />
      </div>
    </div>
  )
}

export default LandingPage

================
File: src/services/ai.ts
================
import { ChatMessage, ChatRequestBody, TogetherAIResponse } from '../types/together-ai'

const API_URL = '/api/chat'
const API_KEY = import.meta.env.VITE_TOGETHER_API_KEY

// Input sanitization
const sanitizeInput = (input: string): string => {
  return input.trim().replace(/<[^>]*>/g, '')
}

// Error handling helper
const handleApiError = (error: any): never => {
  if (error instanceof Response) {
    throw new Error(`API Error: ${error.status} ${error.statusText}`)
  }
  throw error
}

export async function sendChatMessage(messages: ChatMessage[]): Promise<string> {
  try {
    // Validate API key
    if (!API_KEY) {
      throw new Error('API key is not configured')
    }

    // Sanitize all message contents
    const sanitizedMessages = messages.map(msg => ({
      ...msg,
      content: sanitizeInput(msg.content)
    }))

    const response = await fetch(API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        messages: sanitizedMessages,
        model: 'mistralai/Mixtral-8x7B-Instruct-v0.1',
        temperature: 0.7,
        max_tokens: 1000,
      } as ChatRequestBody),
    })

    if (!response.ok) {
      if (response.status === 429) {
        throw new Error('Rate limit exceeded. Please try again later.')
      }
      if (response.status === 402) {
        throw new Error('Free message limit exceeded. Please upgrade your plan.')
      }
      handleApiError(response)
    }

    const data: TogetherAIResponse = await response.json()
    
    if (!data.choices?.[0]?.message?.content) {
      throw new Error('Invalid response from AI service')
    }

    return data.choices[0].message.content
  } catch (error) {
    console.error('Error in sendChatMessage:', error)
    throw error
  }
}

export async function generateCode(prompt: string): Promise<string> {
  const sanitizedPrompt = sanitizeInput(prompt)
  
  const messages: ChatMessage[] = [
    {
      role: 'system',
      content: `You are a code generation assistant. Provide only the code implementation without any explanation or markdown formatting. 
      Focus on writing clean, efficient, and well-commented code that solves the user's request.`
    },
    {
      role: 'user',
      content: sanitizedPrompt
    }
  ]

  try {
    const response = await sendChatMessage(messages)
    
    // Extract code from potential markdown formatting
    const codeMatch = response.match(/```(?:javascript|js)?\n([\s\S]*?)```/)
    if (codeMatch) {
      return codeMatch[1].trim()
    }
    
    return response.trim()
  } catch (error) {
    console.error('Error in generateCode:', error)
    throw new Error('Failed to generate code. Please try again.')
  }
}

================
File: src/services/analytics.ts
================
type EventType = 'page_view' | 'chat_message' | 'error' | 'subscription_changed'

interface AnalyticsEvent {
  type: EventType
  properties?: Record<string, any>
}

class Analytics {
  private isEnabled: boolean

  constructor() {
    this.isEnabled = import.meta.env.VITE_ENABLE_ANALYTICS === 'true'
  }

  public trackEvent({ type, properties = {} }: AnalyticsEvent) {
    if (!this.isEnabled) return

    // Here you would typically send to your analytics service
    // For now, we'll just log to console in production
    if (import.meta.env.PROD) {
      console.log('[Analytics]', {
        type,
        properties,
        timestamp: new Date().toISOString(),
      })
    }
  }

  public trackError(error: Error) {
    this.trackEvent({
      type: 'error',
      properties: {
        message: error.message,
        stack: error.stack,
      },
    })
  }

  public trackPageView(page: string) {
    this.trackEvent({
      type: 'page_view',
      properties: {
        page,
        referrer: document.referrer,
      },
    })
  }
}

export const analytics = new Analytics()

================
File: src/services/errorLogging.ts
================
import { init, captureException } from '@sentry/react'

export const initErrorLogging = () => {
  if (import.meta.env.PROD) {
    init({
      dsn: import.meta.env.VITE_SENTRY_DSN,
      tracesSampleRate: 1.0,
      enabled: import.meta.env.PROD,
    })
  }
}

export const logError = (error: Error, context?: Record<string, any>) => {
  console.error(error)
  
  if (import.meta.env.PROD) {
    captureException(error, {
      extra: context
    })
  }
}

================
File: src/services/webcontainer.ts
================
import { WebContainer } from '@webcontainer/api'

let webcontainerInstance: WebContainer | null = null

export interface FileSystemTree {
  [key: string]: {
    file?: {
      contents: string
    }
    directory?: {
      [key: string]: any
    }
  }
}

/**
 * Initialize the WebContainer instance
 */
export async function initWebContainer(): Promise<WebContainer> {
  if (!webcontainerInstance) {
    webcontainerInstance = await WebContainer.boot()
  }
  return webcontainerInstance
}

/**
 * Get the current WebContainer instance
 */
export function getWebContainer(): WebContainer | null {
  return webcontainerInstance
}

/**
 * Mount a file system tree to the WebContainer
 */
export async function mountFiles(files: FileSystemTree): Promise<void> {
  const instance = await initWebContainer()
  await instance.mount(files)
}

/**
 * Write a file to the WebContainer filesystem
 */
export async function writeFile(path: string, contents: string): Promise<void> {
  const instance = await initWebContainer()
  await instance.fs.writeFile(path, contents)
}

/**
 * Read a file from the WebContainer filesystem
 */
export async function readFile(path: string): Promise<string> {
  const instance = await initWebContainer()
  const file = await instance.fs.readFile(path)
  return new TextDecoder().decode(file)
}

/**
 * Install npm dependencies in the WebContainer
 */
export async function installDependencies(dependencies: string[]): Promise<{
  success: boolean
  error?: string
}> {
  try {
    const instance = await initWebContainer()
    const process = await instance.spawn('npm', ['install', ...dependencies])
    
    return new Promise((resolve) => {
      let output = ''

      process.output.pipeTo(
        new WritableStream({
          write(data) {
            output += data
          },
        })
      )

      process.exit.then((code) => {
        resolve({
          success: code === 0,
          error: code !== 0 ? output : undefined
        })
      })
    })
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error occurred'
    }
  }
}

/**
 * Start a development server in the WebContainer
 */
export async function startDevServer(): Promise<{
  success: boolean
  url?: string
  error?: string
}> {
  try {
    const instance = await initWebContainer()
    
    // First, create a basic vite config
    await writeFile('vite.config.js', `
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    host: true,
    port: 5173
  }
})`)
    
    // Create a basic index.html if it doesn't exist
    await writeFile('index.html', `
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Preview</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>`)

    const serverProcess = await instance.spawn('npm', ['run', 'dev'])
    
    return new Promise((resolve) => {
      let output = ''
      let resolved = false

      serverProcess.output.pipeTo(
        new WritableStream({
          write(data) {
            output += data
            // Look for the development server URL in the output
            if (!resolved && output.includes('Local:')) {
              resolved = true
              const urlMatch = output.match(/(?:Local|Network):\s+(http:\/\/[\w.]+:\d+)/)
              if (urlMatch) {
                resolve({
                  success: true,
                  url: urlMatch[1].replace('localhost', '0.0.0.0')
                })
              }
            }
          },
        })
      )

      serverProcess.exit.then((code) => {
        if (!resolved) {
          resolve({
            success: false,
            error: `Server failed to start (exit code ${code}): ${output}`
          })
        }
      })

      // Resolve after timeout if server doesn't start
      setTimeout(() => {
        if (!resolved) {
          resolve({
            success: false,
            error: 'Server start timeout'
          })
        }
      }, 30000)
    })
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error occurred'
    }
  }
}

================
File: src/types/together-ai.ts
================
export interface ChatMessage {
  role: 'system' | 'user' | 'assistant'
  content: string
}

export interface TogetherAIResponse {
  choices: {
    message: {
      content: string
      role: string
    }
    finish_reason: string
    index: number
  }[]
  created: number
  model: string
  usage: {
    prompt_tokens: number
    completion_tokens: number
    total_tokens: number
  }
}

export interface ChatRequestBody {
  messages: ChatMessage[]
  model?: string
  temperature?: number
  max_tokens?: number
}

================
File: src/utils/env.ts
================
interface EnvVar {
  key: string
  required: boolean
  type: 'string' | 'boolean' | 'number'
}

const ENV_VARS: EnvVar[] = [
  { key: 'VITE_TOGETHER_API_KEY', required: true, type: 'string' },
  { key: 'VITE_API_URL', required: true, type: 'string' },
  { key: 'VITE_WS_URL', required: true, type: 'string' },
  { key: 'VITE_ENABLE_ANALYTICS', required: false, type: 'boolean' },
  { key: 'VITE_ENABLE_CHAT_HISTORY', required: false, type: 'boolean' },
  { key: 'VITE_MAX_FREE_MESSAGES', required: true, type: 'number' },
  { key: 'VITE_APP_NAME', required: true, type: 'string' },
  { key: 'VITE_APP_VERSION', required: true, type: 'string' },
  { key: 'VITE_SENTRY_DSN', required: false, type: 'string' },
]

export function validateEnv(): void {
  const errors: string[] = []

  ENV_VARS.forEach(({ key, required, type }) => {
    const value = import.meta.env[key]

    if (required && !value) {
      errors.push(`Missing required environment variable: ${key}`)
      return
    }

    if (value) {
      switch (type) {
        case 'boolean':
          if (value !== 'true' && value !== 'false') {
            errors.push(`Environment variable ${key} must be a boolean`)
          }
          break
        case 'number':
          if (isNaN(Number(value))) {
            errors.push(`Environment variable ${key} must be a number`)
          }
          break
      }
    }
  })

  if (errors.length > 0) {
    throw new Error(`Environment validation failed:\n${errors.join('\n')}`)
  }
}

================
File: src/App.tsx
================
import { BrowserRouter, Routes, Route } from 'react-router-dom'
import { useEffect, useState, createContext, Suspense } from 'react'
import { Loader2 } from 'lucide-react'
import ErrorBoundary from './components/ErrorBoundary'
import LandingPage from './pages/LandingPage'
import ChatPage from './pages/ChatPage'
import AurocoderPage from './pages/AurocoderPage'
import AuthPage from './pages/AuthPage'
import Navbar from './components/Navbar'
import './index.css'

// Create theme context with proper typing
interface ThemeContextType {
  darkMode: boolean
  setDarkMode: (value: boolean) => void
}

export const ThemeContext = createContext<ThemeContextType>({
  darkMode: false,
  setDarkMode: () => {},
})

// Loading fallback component
const LoadingFallback = () => (
  <div className="min-h-screen flex items-center justify-center">
    <Loader2 className="w-8 h-8 animate-spin text-purple-600" />
  </div>
)

// Environment variables validation
const validateEnv = () => {
  const required = ['VITE_TOGETHER_API_KEY']
  const missing = required.filter(key => !import.meta.env[key])
  if (missing.length > 0) {
    throw new Error(`Missing required environment variables: ${missing.join(', ')}`)
  }
}

function App() {
  const [darkMode, setDarkMode] = useState(() => {
    return localStorage.getItem('darkMode') === 'true'
  })

  useEffect(() => {
    // Validate environment variables
    validateEnv()

    // Apply dark mode
    if (darkMode) {
      document.documentElement.classList.add('dark')
    } else {
      document.documentElement.classList.remove('dark')
    }
    localStorage.setItem('darkMode', darkMode.toString())
  }, [darkMode])

  return (
    <ErrorBoundary>
      <BrowserRouter>
        <ThemeContext.Provider value={{ darkMode, setDarkMode }}>
          <div className={`min-h-screen ${darkMode ? 'dark' : ''}`}>
            <div className="min-h-screen bg-gradient-to-br from-slate-50 to-white dark:from-gray-900 dark:to-gray-800 transition-colors duration-200">
              <Navbar darkMode={darkMode} setDarkMode={setDarkMode} />
              <Suspense fallback={<LoadingFallback />}>
                <Routes>
                  <Route path="/" element={<LandingPage />} />
                  <Route path="/chat" element={<ChatPage />} />
                  <Route path="/aurocoder" element={<AurocoderPage />} />
                  <Route path="/auth" element={<AuthPage />} />
                </Routes>
              </Suspense>
            </div>
          </div>
        </ThemeContext.Provider>
      </BrowserRouter>
    </ErrorBoundary>
  )
}

export default App

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
}

@keyframes spin-slow {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@keyframes reverse-spin {
  from {
    transform: rotate(360deg);
  }
  to {
    transform: rotate(0deg);
  }
}

@keyframes blob {
  0% {
    transform: translate(0px, 0px) scale(1);
  }
  33% {
    transform: translate(30px, -50px) scale(1.1);
  }
  66% {
    transform: translate(-20px, 20px) scale(0.9);
  }
  100% {
    transform: translate(0px, 0px) scale(1);
  }
}

.animate-blob {
  animation: blob 7s infinite;
}

.animation-delay-2000 {
  animation-delay: 2s;
}

.animation-delay-4000 {
  animation-delay: 4s;
}

.animate-spin-slow {
  animation: spin-slow 15s linear infinite;
}

.animate-reverse-spin {
  animation: reverse-spin 15s linear infinite;
}

/* Scrollbar Styles */
::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: transparent;
}

::-webkit-scrollbar-thumb {
  background: #cbd5e1;
  border-radius: 4px;
}

.dark ::-webkit-scrollbar-thumb {
  background: #475569;
}

================
File: src/main.tsx
================
import { StrictMode, Suspense } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import { initErrorLogging } from './services/errorLogging'
import { validateEnv } from './utils/env'
import './index.css'

// Validate environment variables
validateEnv()

// Initialize error logging
initErrorLogging()

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <Suspense fallback={
      <div className="min-h-screen flex items-center justify-center">
        <div className="w-8 h-8 border-4 border-purple-600 border-t-transparent rounded-full animate-spin" />
      </div>
    }>
      <App />
    </Suspense>
  </StrictMode>,
)

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

interface ImportMetaEnv {
  readonly VITE_TOGETHER_API_KEY: string
  readonly VITE_API_URL: string
  readonly VITE_WS_URL: string
  readonly VITE_ENABLE_ANALYTICS: string
  readonly VITE_ENABLE_CHAT_HISTORY: string
  readonly VITE_MAX_FREE_MESSAGES: string
  readonly VITE_APP_NAME: string
  readonly VITE_APP_VERSION: string
  readonly VITE_SENTRY_DSN?: string
}

interface ImportMeta {
  readonly env: ImportMetaEnv
}

================
File: drizzle.config.ts
================
import type { Config } from 'drizzle-kit'

export default {
  schema: './src/db/schema.ts',
  out: './drizzle',
  driver: 'pg',
  dbCredentials: {
    connectionString: process.env.NEON_DATABASE_URL!,
  },
} satisfies Config

================
File: errorLogging.ts
================
import { init, captureException } from '@sentry/react'

export const initErrorLogging = () => {
  if (import.meta.env.PROD) {
    init({
      dsn: import.meta.env.VITE_SENTRY_DSN,
      tracesSampleRate: 1.0,
      enabled: import.meta.env.PROD,
    })
  }
}

export const logError = (error: Error, context?: Record<string, any>) => {
  console.error(error)
  
  if (import.meta.env.PROD) {
    captureException(error, {
      extra: context
    })
  }
}

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Aurora AI Assistant - Next Generation AI Chat</title>
    
    <!-- Primary Meta Tags -->
    <meta name="title" content="Aurora AI Assistant - Next Generation AI Chat">
    <meta name="description" content="Experience the future of AI with Aurora. Advanced chat, code assistance, and intelligent responses powered by cutting-edge language models.">
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://aurora-ai.com/">
    <meta property="og:title" content="Aurora AI Assistant - Next Generation AI Chat">
    <meta property="og:description" content="Experience the future of AI with Aurora. Advanced chat, code assistance, and intelligent responses powered by cutting-edge language models.">
    <meta property="og:image" content="/og-image.png">
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image">
    <meta property="twitter:url" content="https://aurora-ai.com/">
    <meta property="twitter:title" content="Aurora AI Assistant - Next Generation AI Chat">
    <meta property="twitter:description" content="Experience the future of AI with Aurora. Advanced chat, code assistance, and intelligent responses powered by cutting-edge language models.">
    <meta property="twitter:image" content="/og-image.png">
    
    <!-- Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg">
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/site.webmanifest">
    
    <!-- Theme Color -->
    <meta name="theme-color" content="#8B5CF6">
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: LICENSE
================
MIT License

Copyright (c) 2024 Jace Lander

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: package.json
================
{
  "name": "My new app",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "db:generate": "drizzle-kit generate:pg",
    "db:push": "drizzle-kit push:pg"
  },
  "dependencies": {
    "@headlessui/react": "^2.2.0",
    "@monaco-editor/react": "^4.6.0",
    "@neondatabase/serverless": "^0.9.0",
    "@sentry/react": "^8.41.0",
    "@upstash/ratelimit": "^2.0.4",
    "@upstash/redis": "^1.34.3",
    "@vercel/edge": "^1.1.2",
    "@webcontainer/api": "^1.5.1-internal.1",
    "crypto-js": "^4.2.0",
    "drizzle-orm": "^0.30.2",
    "framer-motion": "^11.12.0",
    "lucide-react": "^0.453.0",
    "postgres": "^3.4.5",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^7.0.1",
    "repomix": "^0.2.5",
    "stripe": "^17.4.0"
  },
  "devDependencies": {
    "@types/crypto-js": "^4.2.2",
    "@types/react": "^18.3.6",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.20",
    "drizzle-kit": "^0.20.14",
    "globals": "^15.9.0",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.14",
    "typescript": "^5.5.3",
    "vite": "^5.4.6"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
## AuroraChat, by Srcbook

This app was created using https://srcbook.com.
Need help or want to join the community? Join our [Discord](https://discord.gg/shDEGBSe2d).

To run the devserver:
```
npm install
npm run dev
```

================
File: robots.txt
================
User-agent: *
Allow: /

Sitemap: https://aurora-ai.com/sitemap.xml

================
File: site.webmanifest
================
{
  "name": "Aurora AI Assistant",
  "short_name": "Aurora AI",
  "icons": [
    {
      "src": "/android-chrome-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "/android-chrome-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ],
  "theme_color": "#8B5CF6",
  "background_color": "#ffffff",
  "display": "standalone",
  "start_url": "/"
}

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  darkMode: 'class',
  theme: {
    extend: {
      animation: {
        'spin-slow': 'spin 15s linear infinite',
      },
      fontFamily: {
        'aurora': ['Orbitron', 'sans-serif'],
      },
      colors: {
        'aurora': {
          purple: '#8B5CF6',
          pink: '#EC4899',
          blue: '#3B82F6',
        },
      },
      backgroundImage: {
        'aurora-gradient': 'linear-gradient(135deg, #8B5CF6 0%, #EC4899 100%)',
      }
    },
  },
  plugins: [],
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}

================
File: vercel.json
================
{
  "version": 2,
  "buildCommand": "npm run build",
  "outputDirectory": "dist",
  "routes": [
    {
      "src": "/api/(.*)",
      "dest": "/api/$1"
    },
    {
      "src": "/(.*)",
      "dest": "/index.html"
    }
  ]
}

================
File: vite.config.ts
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    headers: {
      'Cross-Origin-Embedder-Policy': 'require-corp',
      'Cross-Origin-Opener-Policy': 'same-origin',
    },
  },
})
